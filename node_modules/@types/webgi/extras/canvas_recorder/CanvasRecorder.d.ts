import { SimpleEventDispatcher } from '../../helpers/EventDispatcher';
export interface CanvasRecorderOptions {
    frameRate: number;
    mimeType: string;
    videoBitsPerSecond?: number;
}
declare global {
    interface HTMLCanvasElement {
        captureStream(frameRate?: number): MediaStream;
    }
}
export declare class CanvasRecorder extends SimpleEventDispatcher<'starting' | 'start' | 'pause' | 'stop' | 'stopping' | 'resume' | 'error'> {
    private _canvas;
    private _options;
    private _state;
    private _console;
    private _recorder?;
    private _track;
    private _setOptions;
    setOptions(options: Partial<CanvasRecorderOptions>): void;
    private _currentRecording;
    private _currentImages;
    private _recordingCallback?;
    stepMode: boolean;
    constructor(canvas: HTMLCanvasElement, options?: Partial<CanvasRecorderOptions>);
    isRecording(): boolean;
    start(): void;
    private _imgDirectory?;
    private _resumeSyncTime;
    private _frameCount;
    requestFrame(): Promise<void>;
    pause(): void;
    stop(recordingCallback: (b: Blob) => void): void;
    get state(): 'stopped' | 'recording' | 'paused' | 'error';
    dispose(): void;
    private _writeImages;
    private _onstop;
    private _onstart;
    private _onresume;
    private _onpause;
    private _ondataavailable;
    private _onerror;
    static GetSupportedMimeTypes(types?: string[], codecs?: string[], firstOnly?: boolean): string[] | string | undefined;
}
//# sourceMappingURL=CanvasRecorder.d.ts.map