import { Vector3 } from 'three';
import { DirectionalLight2 } from '../core/threejs/Lights';
import { Color } from 'three/src/math/Color';
import { IDisposable, UiObjectConfig } from 'webgi/interfaces';
export interface RDShadowParams {
    frustumSize: number;
    far: number;
    bias: number;
    width: number;
    near: number;
    enabled: boolean;
    height: number;
    normalBias: number;
    radius: number;
}
export interface RDRandomParams {
    minDistanceScale: Vector3;
    distanceScale: number;
    focus: number;
    spread: number;
    direction: Vector3;
    normalDirection: Vector3;
}
export declare class RandomizedDirectionalLight extends DirectionalLight2 implements IDisposable {
    private _shadowParams;
    private _randomParams;
    isRandomizedDirectionalLight: boolean;
    constructor(color?: Color | string | number, intensity?: number, shadow?: Partial<RDShadowParams>, random?: Partial<RDRandomParams>);
    /**
     * call setter to change. or call updateShadowParams after changing
     */
    get shadowParams(): Partial<RDShadowParams>;
    set shadowParams(value: Partial<RDShadowParams>);
    get randomParams(): Partial<RDRandomParams>;
    set randomParams(value: Partial<RDRandomParams>);
    updateShadowParams(): void;
    randomizePosition(seed: number, focus?: number | null, spread?: number | null): void;
    refreshShadowCamNearFar(): void;
    dispose(): void;
    get uiConfig(): UiObjectConfig;
    fromJSON(data: any, meta?: any): this | null;
}
//# sourceMappingURL=RandomizedDirectionalLight.d.ts.map