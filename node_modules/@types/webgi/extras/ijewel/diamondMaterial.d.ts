import { BufferGeometry, Camera, IUniform, Object3D, Scene, ShaderMaterial, Texture, Vector3, WebGLRenderer } from 'three';
import { Color } from 'three/src/math/Color';
import { AnyOptions, IMaterial, ITexture, UiObjectConfig } from 'webgi/interfaces';
import { DiamondMaterialParameters } from 'webgi/extras/ijewel/utils';
export declare class DiamondMaterial extends ShaderMaterial implements IMaterial {
    static readonly TypeSlug = "dmat";
    readonly typeSlug = "dmat";
    assetType: 'material';
    get mmMaterial(): this;
    get materialObject(): this;
    private __envMap;
    isDiamondMaterial: true;
    color: Color;
    envMapIntensity: number;
    dispersion: number;
    absorptionFactor: number;
    refractiveIndex: number;
    squashFactor: number;
    geometryFactor: number;
    gammaFactor: number;
    boostFactors: Vector3;
    transmission: number;
    reflectivity: number;
    rayBounces: number;
    diamondOrientedEnvMap: number;
    normalsCaptureMap: Texture | null;
    extraUniformsToUpload: Record<string, IUniform>;
    onBeforeRender(renderer: WebGLRenderer, scene: Scene, camera: Camera, geometry: BufferGeometry, object: Object3D): void;
    constructor(parameters: DiamondMaterialParameters);
    setDirty(options?: AnyOptions): void;
    set envMap(value: ITexture | null);
    get envMap(): ITexture | null;
    clone(): this;
    toJSON(meta?: any): DiamondMaterialParameters;
    private _uiConfig?;
    private _uiConfigChildren?;
    static readonly TYPE = "DiamondMaterial";
    get uiConfig(): UiObjectConfig;
    copyProps(oldMaterial: DiamondMaterialParameters): this;
    fromJSON(data: any, meta?: any): this | null;
}
//# sourceMappingURL=diamondMaterial.d.ts.map