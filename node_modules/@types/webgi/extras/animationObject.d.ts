import { AnimationOptions, Easing } from 'popmotion';
import { UiObjectConfig, UiObjectType } from 'webgi/interfaces';
export declare type TUpdaterType = 'scene' | 'renderer' | 'viewer';
export declare type IAnimationObject<V> = AnimationOptions<V> & {
    access?: string;
    duration?: number;
    delay?: number;
    ease?: Easing;
    updater?: (TUpdaterType)[];
    animSet?: IAnimSet;
    animSetParallel?: boolean;
    uiRef?: UiObjectConfig;
    name?: string;
    uiObjectType?: UiObjectType;
    targetObject?: Record<string, any>;
    to?: V | ((fromVal: V, target: any) => V);
};
export declare type IAnimSet = (IAnimationObject<any>)[];
export declare function extractAnimationKey(o: IAnimationObject<any>, target: any): {
    key: undefined;
    tar: any;
} | {
    key: string;
    tar: any;
};
export declare function makeSetterForAnimObject<V>(o: IAnimationObject<V>, target: any, updaters?: Record<TUpdaterType, () => void>, setDirty?: () => void): (a: V) => void;
export declare function animateObject(target: any, o: IAnimationObject<any>, updaters: Record<TUpdaterType, () => void>): Promise<any>;
export declare function animateSet(target: any, anims: IAnimSet, updaters: Record<TUpdaterType, () => void>, parallel?: boolean): Promise<any[] | undefined>;
export declare function syncAnimSetUi(uiConfig?: UiObjectConfig[], animSet?: IAnimSet, targetObject?: Record<string, any>, updaters1?: Record<TUpdaterType, () => void>): void;
//# sourceMappingURL=animationObject.d.ts.map