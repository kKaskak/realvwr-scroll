import { BufferGeometry, Camera, DepthModes, IUniform, Material, MeshPhysicalMaterial, MeshPhysicalMaterialParameters, NormalMapTypes, Object3D, Scene, Shader, Side, Vector2, WebGLRenderer } from 'three';
import { MaterialExtension } from './MaterialExtender';
import { AnyOptions, IMaterial, UiObjectConfig } from 'webgi/interfaces';
import { Color } from 'three/src/math/Color';
import { Blending } from 'three/src/constants';
export declare const standardMaterialPropList: {
    color: string;
    roughness: number;
    metalness: number;
    map: null;
    lightMap: null;
    lightMapIntensity: number;
    aoMap: null;
    aoMapIntensity: number;
    emissive: string;
    emissiveIntensity: number;
    emissiveMap: null;
    bumpMap: null;
    bumpScale: number;
    normalMap: null;
    normalMapType: NormalMapTypes;
    normalScale: Vector2;
    displacementMap: null;
    displacementScale: number;
    displacementBias: number;
    roughnessMap: null;
    metalnessMap: null;
    alphaMap: null;
    envMap: null;
    envMapIntensity: number;
    refractionRatio: number;
    wireframe: boolean;
    wireframeLinewidth: number;
    skinning: boolean;
    morphTargets: boolean;
    morphNormals: boolean;
    flatShading: boolean;
    glossiness: number;
    glossinessMap: null;
    specularColor: Color;
    specularColorMap: null;
    name: string;
    fog: boolean;
    blending: Blending;
    side: Side;
    vertexColors: boolean;
    opacity: number;
    transparent: boolean;
    blendSrc: import("three").BlendingDstFactor;
    blendDst: import("three").BlendingDstFactor;
    blendEquation: import("three").BlendingEquation;
    blendSrcAlpha: null;
    blendDstAlpha: null;
    blendEquationAlpha: null;
    depthFunc: DepthModes;
    depthTest: boolean;
    depthWrite: boolean;
    stencilWriteMask: number;
    stencilFunc: import("three").StencilFunc;
    stencilRef: number;
    stencilFuncMask: number;
    stencilFail: import("three").StencilOp;
    stencilZFail: import("three").StencilOp;
    stencilZPass: import("three").StencilOp;
    stencilWrite: boolean;
    clippingPlanes: null;
    clipIntersection: boolean;
    clipShadows: boolean;
    shadowSide: null;
    colorWrite: boolean;
    precision: null;
    polygonOffset: boolean;
    polygonOffsetFactor: number;
    polygonOffsetUnits: number;
    dithering: boolean;
    alphaTest: number;
    alphaToCoverage: boolean;
    premultipliedAlpha: boolean;
    visible: boolean;
    toneMapped: boolean;
    userData: {};
    wireframeLinecap: string;
    wireframeLinejoin: string;
};
export declare const physicalMaterialPropList: {
    clearcoat: number;
    clearcoatMap: null;
    clearcoatRoughness: number;
    clearcoatRoughnessMap: null;
    clearcoatNormalScale: Vector2;
    clearcoatNormalMap: null;
    reflectivity: number;
    sheen: number;
    sheenColor: Color;
    sheenColorMap: null;
    sheenRoughness: number;
    sheenRoughnessMap: null;
    specularIntensity: number;
    specularIntensityMap: null;
    specularColor: Color;
    specularColorMap: null;
    transmission: number;
    transmissionMap: null;
    thickness: number;
    thicknessMap: null;
    attenuationDistance: number;
    attenuationColor: Color;
    iridescenceMap: null;
    iridescenceIOR: number;
    iridescenceThicknessRange: number[];
    iridescenceThicknessMap: null;
    color: string;
    roughness: number;
    metalness: number;
    map: null;
    lightMap: null;
    lightMapIntensity: number;
    aoMap: null;
    aoMapIntensity: number;
    emissive: string;
    emissiveIntensity: number;
    emissiveMap: null;
    bumpMap: null;
    bumpScale: number;
    normalMap: null;
    normalMapType: NormalMapTypes;
    normalScale: Vector2;
    displacementMap: null;
    displacementScale: number;
    displacementBias: number;
    roughnessMap: null;
    metalnessMap: null;
    alphaMap: null;
    envMap: null;
    envMapIntensity: number;
    refractionRatio: number;
    wireframe: boolean;
    wireframeLinewidth: number;
    skinning: boolean;
    morphTargets: boolean;
    morphNormals: boolean;
    flatShading: boolean;
    glossiness: number;
    glossinessMap: null;
    name: string;
    fog: boolean;
    blending: Blending;
    side: Side;
    vertexColors: boolean;
    opacity: number;
    transparent: boolean;
    blendSrc: import("three").BlendingDstFactor;
    blendDst: import("three").BlendingDstFactor;
    blendEquation: import("three").BlendingEquation;
    blendSrcAlpha: null;
    blendDstAlpha: null;
    blendEquationAlpha: null;
    depthFunc: DepthModes;
    depthTest: boolean;
    depthWrite: boolean;
    stencilWriteMask: number;
    stencilFunc: import("three").StencilFunc;
    stencilRef: number;
    stencilFuncMask: number;
    stencilFail: import("three").StencilOp;
    stencilZFail: import("three").StencilOp;
    stencilZPass: import("three").StencilOp;
    stencilWrite: boolean;
    clippingPlanes: null;
    clipIntersection: boolean;
    clipShadows: boolean;
    shadowSide: null;
    colorWrite: boolean;
    precision: null;
    polygonOffset: boolean;
    polygonOffsetFactor: number;
    polygonOffsetUnits: number;
    dithering: boolean;
    alphaTest: number;
    alphaToCoverage: boolean;
    premultipliedAlpha: boolean;
    visible: boolean;
    toneMapped: boolean;
    userData: {};
    wireframeLinecap: string;
    wireframeLinejoin: string;
};
export declare class MeshStandardMaterial2 extends MeshPhysicalMaterial implements IMaterial {
    materialExtensions: MaterialExtension[];
    static readonly TypeSlug = "pmat";
    static readonly TYPE = "MeshStandardMaterial2";
    readonly typeSlug = "pmat";
    assetType: 'material';
    materialObject: this;
    isMeshStandardMaterial2: boolean;
    constructor(parameters?: MeshPhysicalMaterialParameters & {
        customMaterialExtensions?: MaterialExtension[];
    });
    setDirty(options?: AnyOptions): void;
    registerMaterialExtensions(customMaterialExtensions: MaterialExtension[]): void;
    unregisterMaterialExtensions(customMaterialExtensions: MaterialExtension[]): void;
    private _uiConfig?;
    private _uiConfigChildren?;
    get uiConfig(): UiObjectConfig;
    onBeforeCompile(shader: Shader, renderer: WebGLRenderer): void;
    customProgramCacheKey(): string;
    extraUniformsToUpload: Record<string, IUniform>;
    onBeforeRender(renderer: WebGLRenderer, scene: Scene, camera: Camera, geometry: BufferGeometry, object: Object3D): void;
    copyProps(oldMaterial: Material, allowUnknownType?: boolean): this;
    toJSON(meta?: any): any;
    fromJSON(data: any, meta?: any, allowUnknownType?: boolean): this | null;
    clone(): this;
}
//# sourceMappingURL=MeshStandardMaterial2.d.ts.map