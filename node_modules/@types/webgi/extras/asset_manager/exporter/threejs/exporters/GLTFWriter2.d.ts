import { Material, MeshStandardMaterial, Object3D, Texture } from 'three';
declare const GLTFWriter2_base: any;
export declare class GLTFWriter2 extends GLTFWriter2_base {
    serializeUserData(object: Object3D | Material, objectDef: any): void;
    processObjects(objects: Object3D[]): void;
    protected _defaultMaterial: MeshStandardMaterial;
    /**
     * Checks for shader material and does the same thing...
     * @param material
     */
    processMaterial(material: Material): any;
    /**
     * Same as processImage but for image blobs
     * @param blob
     * @param texture
     */
    processImageBlob(blob: Blob, texture: Texture): any;
    processSampler(map: Texture): any;
    processTexture(map: Texture): any;
    processImage(image: any, format: number, flipY: boolean, mimeType?: string): any;
    /**
     * Used in GLTFWriter2.processTexture for rootPath. Note that this does not check for options.embedUrlImages, it must be done separately.
     * @param image
     * @param uri
     * @param flipY
     * @param mimeType
     */
    processImageUri(image: any, uri: string, flipY: boolean, mimeType?: string): any;
}
export {};
//# sourceMappingURL=GLTFWriter2.d.ts.map