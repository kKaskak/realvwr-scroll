import { IViewerApp } from 'webgi/interfaces';
import { GLTFExporter2 } from 'webgi/extras/asset_manager/exporter/threejs/exporters/GLTFExporter2';
import { GLTFWriter2 } from 'webgi/extras/asset_manager/exporter/threejs/exporters/GLTFWriter2';
import { MeshStandardMaterial } from 'three';
export declare function addGLTFExporter(viewer: IViewerApp, exporterClass?: typeof GLTFExporter2, onCtor?: (ex: GLTFExporter2) => void): void;
/**
 * Bump Map Extension
 * bumpTexture and bumpScale are added to the material(standard and physical)
 *
 * Specification: https://dist.pixotronics.com/webgi/manual/gltf/WEBGI_materials_bumpmap.html
 */
declare class GLTFMaterialsBumpMapExtensionExport {
    writer: GLTFWriter2;
    name: string;
    constructor(writer: GLTFWriter2);
    writeMaterial(material: MeshStandardMaterial, materialDef: any): void;
}
export type { GLTFMaterialsBumpMapExtensionExport };
/**
 * Displacement Map Extension
 * displacementTexture and displacementScale are added to the material(standard and physical)
 *
 * Specification: https://dist.pixotronics.com/webgi/manual/gltf/WEBGI_materials_displacementmap.html
 */
declare class GLTFMaterialsDisplacementMapExtensionExport {
    writer: GLTFWriter2;
    name: string;
    constructor(writer: GLTFWriter2);
    writeMaterial(material: MeshStandardMaterial, materialDef: any): void;
}
export type { GLTFMaterialsDisplacementMapExtensionExport };
/**
 * Light Map Extension
 * lightMapTexture and lightMapIntensity are added to the material(standard and physical)
 *
 * Specification: https://dist.pixotronics.com/webgi/manual/gltf/WEBGI_materials_lightmap.html
 */
declare class GLTFMaterialsLightMapExtensionExport {
    writer: GLTFWriter2;
    name: string;
    constructor(writer: GLTFWriter2);
    writeMaterial(material: MeshStandardMaterial, materialDef: any): void;
}
export type { GLTFMaterialsLightMapExtensionExport };
declare class GLTFMaterialsAlphaMapExtensionExport {
    writer: GLTFWriter2;
    name: string;
    constructor(writer: GLTFWriter2);
    writeMaterial(material: MeshStandardMaterial, materialDef: any): void;
}
export type { GLTFMaterialsAlphaMapExtensionExport };
//# sourceMappingURL=gltf.d.ts.map