import { AnyOptions, ISceneObject, IViewerApp, TAssetTypes } from 'webgi/interfaces';
import { SimpleEventDispatcher } from 'webgi/helpers/EventDispatcher';
import { ExportFileOptions, IAssetExporter, IExporter } from 'webgi/extras/asset_manager/AssetManager';
import { ObjectProcessorMap } from 'webgi/helpers/ObjectProcessorMap';
export declare type BlobExt = Blob & {
    ext: string;
};
export declare class AssetExporter extends SimpleEventDispatcher<'exporterCreate' | 'exportFile'> implements IAssetExporter {
    private _processors;
    get processors(): ObjectProcessorMap<TAssetTypes>;
    static readonly Exporters: IExporter[];
    getExporter(...ext: string[]): IExporter | undefined;
    constructor(viewer: IViewerApp, options?: AnyOptions);
    exportObject(obj?: ISceneObject, options?: ExportFileOptions): Promise<BlobExt | undefined>;
    private _exportFile;
    private _createParser;
    private _cachedParsers;
    private _getParser;
    processBeforeExport(obj: ISceneObject, options?: AnyOptions): Promise<{
        obj: any;
        ext: string;
        typeExt?: string;
    } | undefined>;
    dispose(): void;
}
//# sourceMappingURL=AssetExporter.d.ts.map