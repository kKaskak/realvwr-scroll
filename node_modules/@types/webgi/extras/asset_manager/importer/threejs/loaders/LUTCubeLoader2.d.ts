import { LUTCubeLoader, LUTCubeResult } from 'three/examples/jsm/loaders/LUTCubeLoader';
import { IJSONSerializable } from 'webgi/interfaces';
import { Data3DTexture, DataTexture, Vector3 } from 'three';
export declare class LUTCubeTextureWrapper implements LUTCubeResult, IJSONSerializable {
    readonly domainMax: Vector3;
    readonly domainMin: Vector3;
    readonly size: number;
    readonly texture: DataTexture;
    readonly texture3D: Data3DTexture;
    readonly title: string;
    readonly userData: any;
    readonly uuid: string;
    readonly type = "LUTCubeTextureWrapper";
    readonly assetType = "lutTexture";
    constructor({ domainMax, domainMin, size, texture, texture3D, title, }: LUTCubeResult);
    fromJSON(data: any, meta?: any): this;
    toJSON(meta?: any): any;
}
export declare class LUTCubeLoader2 extends LUTCubeLoader {
    parse(data: string): LUTCubeResult;
}
//# sourceMappingURL=LUTCubeLoader2.d.ts.map