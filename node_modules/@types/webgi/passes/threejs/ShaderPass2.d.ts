import { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';
import { AnyOptions, IMaterial, IPass, IShaderPropertiesUpdater } from 'webgi/interfaces';
import { BufferGeometry, Camera, IUniform, Object3D, Scene, Shader, ShaderMaterial, ShaderMaterialParameters, TextureEncoding, WebGLRenderer, WebGLRenderTarget } from 'three';
import { MaterialExtension } from 'webgi/extras/asset_manager/threejs/MaterialExtender';
export declare class ShaderMaterial2 extends ShaderMaterial implements IMaterial {
    readonly typeSlug = "shaderMat";
    assetType: 'material';
    materialObject: this;
    materialExtensions: MaterialExtension[];
    constructor(parameters?: any);
    registerMaterialExtensions(customMaterialExtensions: MaterialExtension[]): void;
    unregisterMaterialExtensions(customMaterialExtensions: MaterialExtension[]): void;
    onBeforeCompile(shader: Shader, renderer: WebGLRenderer): void;
    customProgramCacheKey(): string;
    extraUniformsToUpload: Record<string, IUniform>;
    onBeforeRender(renderer: WebGLRenderer, scene: Scene, camera: Camera, geometry: BufferGeometry, object: Object3D): void;
    onAfterRender(renderer: WebGLRenderer, scene: Scene, camera: Camera, geometry: BufferGeometry, object: Object3D): void;
    toJSON(meta?: any): any;
    fromJSON(data: any, meta?: any): this | null;
    copyProps(oldMaterial: any): this;
    setDirty(options?: AnyOptions): void;
}
export declare class ShaderMaterialEncodingSupport extends ShaderMaterial2 {
    readonly typeSlug = "shaderMat";
    textures: {
        encoding: TextureEncoding;
        id: string;
    }[];
    constructor(parameters: ShaderMaterialParameters, textureIds: string[]);
    setTextureIds(ids: string[]): void;
    private _setUniformTexSize;
    onBeforeRender(renderer: WebGLRenderer, scene: Scene, camera: Camera, geometry: BufferGeometry, object: Object3D): void;
    onBeforeCompile(s: Shader, renderer: WebGLRenderer): void;
    customProgramCacheKey(): string;
    toJSON(meta?: any): any;
    fromJSON(data: any, meta?: any): this | null;
    copyProps(oldMaterial: any): this;
    setDirty(options?: AnyOptions): void;
}
export declare function patchShaderEncodingSupport(shader: any, ...textureIds: string[]): ShaderMaterialEncodingSupport;
export declare class ShaderPass2 extends ShaderPass implements IPass {
    onDirty: (() => void)[];
    static readonly DEFAULT_TEX_ID = "tDiffuse";
    isShaderPass2: boolean;
    enabled: boolean;
    constructor(shader: Shader | any, ...textureID: string[]);
    dispose(): void;
    setDirty(): void;
    updateShaderProperties(updater?: (IShaderPropertiesUpdater | undefined) | (IShaderPropertiesUpdater | undefined)[]): void;
    render(renderer: WebGLRenderer, writeBuffer?: WebGLRenderTarget, readBuffer?: WebGLRenderTarget, deltaTime?: number, maskActive?: boolean): void;
}
//# sourceMappingURL=ShaderPass2.d.ts.map