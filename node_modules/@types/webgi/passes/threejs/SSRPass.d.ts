import { ShaderPass2 } from 'webgi/passes/threejs/ShaderPass2';
import { IRenderer, IRenderTarget, UiObjectConfig } from 'webgi/interfaces';
import { MaterialExtension } from 'webgi/extras/asset_manager/threejs/MaterialExtender';
import { Vector3, WebGLRenderer, WebGLRenderTarget } from 'three';
export declare class SSRPass extends ShaderPass2 {
    uiConfig?: UiObjectConfig;
    private readonly _inline;
    private _target?;
    private _renderer;
    readonly materialExtension: MaterialExtension;
    /**
     *
     * @param renderer
     * @param target
     * @param gBufferUnpack
     * @param inline - no glossy reflection support when inline is false, yet
     */
    constructor(renderer: IRenderer, target: IRenderTarget | undefined, gBufferUnpack: string, inline?: boolean);
    render(renderer: WebGLRenderer, writeBuffer: WebGLRenderTarget, readBuffer: WebGLRenderTarget, deltaTime: number, maskActive: boolean): void;
    intensity: number;
    boost: Vector3;
    objectRadius: number;
    autoRadius: boolean;
    power: number;
    tolerance: number;
    stepCount: number;
    lowQualityFrames: number;
    maskFrontRays: boolean;
    maskFrontFactor: number;
}
//# sourceMappingURL=SSRPass.d.ts.map