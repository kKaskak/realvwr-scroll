import { AViewerPlugin } from 'webgi/core/AViewerPlugin';
import { UiObjectConfig } from 'webgi/interfaces';
import { Object3DModel } from 'webgi/core/threejs/Object3DModel';
import { Mesh } from 'three';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
import { PickingPlugin } from 'webgi/extras/interaction/PickingPlugin';
export declare type TCSGOperation = 'union' | 'subtract' | 'intersect';
export declare const csgOperations: TCSGOperation[];
export declare abstract class CSGPluginBase extends AViewerPlugin<''> {
    enabled: boolean;
    uiConfig?: UiObjectConfig;
    toJSON: any;
    dependencies: (typeof PickingPlugin)[];
    constructor();
    rootObject?: Object3DModel;
    rootMesh: Mesh<import("three").BufferGeometry, import("three").Material | import("three").Material[]>;
    onAdded(viewer: ViewerApp): Promise<void>;
    showResult: boolean;
    makeSelectedCSGBrush(): Promise<void>;
    csgSelectedEnabled: boolean;
    csgSelectedOperation: string;
    refreshCSG(): void;
    downloadObject(): Promise<void>;
    exportObject(): Promise<import("../../examples/runtime/asset-manager.m").BlobExt | undefined>;
    private _updateSelectedProperties;
    private _selectedObjectChanged;
    private _csgNeedsUpdate;
    private _csgVisible;
    protected abstract _buildCSGMesh(meshes: [Mesh, TCSGOperation][]): Mesh;
    private _preFrame;
    private _findCSGMeshes;
    private _sceneUpdate;
}
//# sourceMappingURL=CSGPluginBase.d.ts.map