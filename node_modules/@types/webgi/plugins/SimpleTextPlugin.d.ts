import { AViewerPlugin } from 'webgi/core/AViewerPlugin';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
import { Mesh, Object3D, Texture } from 'three';
export interface ITextSVGOptions {
    text: string;
    fontFamily?: string;
    fontPath?: string;
    svgBackground?: string;
    xOffset?: number;
    yOffset?: number;
    width?: number;
    height?: number;
    boxWidth?: number;
    boxHeight?: number;
    fontSize?: number;
    maskText?: boolean;
    innerShadow?: boolean;
    bgFillColor?: string;
    textColor?: string;
    style?: string;
}
export declare class TextSVGOptions implements ITextSVGOptions {
    text: string;
    fontSize: number;
    width: number;
    height: number;
    xOffset: number;
    yOffset: number;
    boxWidth: number;
    boxHeight: number;
    fontFamily: string;
    fontPath: string;
    maskText: boolean;
    innerShadow: boolean;
    textColor: string;
    bgFillColor: string;
    svgBackground: string;
    onChange: () => void;
    set(ops: ITextSVGOptions): void;
    reset(): void;
    toJSON(): {
        text: string;
        fontFamily: string;
        fontPath: string;
        svgBackground: string;
        width: number;
        height: number;
        xOffset: number;
        yOffset: number;
        boxWidth: number;
        boxHeight: number;
        fontSize: number;
        maskText: boolean;
        innerShadow: boolean;
        bgFillColor: string;
        textColor: string;
    };
}
export declare const fontFormatExtensionMap: any;
export declare class SimpleTextPlugin extends AViewerPlugin<''> {
    static readonly PluginType = "SimpleTextPlugin";
    enabled: boolean;
    getSelected: <T extends Object3D<import("three").Event>>() => T | undefined;
    onAdded(v: ViewerApp): Promise<void>;
    options: TextSVGOptions;
    applyToMap: boolean;
    applyToBumpMap: boolean;
    applyToAlphaMap: boolean;
    inverseAlphaMap: boolean;
    constructor();
    private _lastMeta;
    private _selectedObjectChanged;
    private _paramsChanged;
    addTextToSelected(): Promise<void>;
    addText(obj: Mesh, data?: ITextSVGOptions): Promise<void>;
    updateText(obj: Mesh, data: ITextSVGOptions): Promise<void>;
    /**
     * List of font names and paths to font files.
     */
    fonts: Record<string, string>;
    makeTextSvg(options: ITextSVGOptions): Promise<Texture | undefined>;
    private _assetLoadOptions;
    protected _getAssetData(path: string): Promise<string>;
}
//# sourceMappingURL=SimpleTextPlugin.d.ts.map