import { AViewerPlugin } from 'webgi/core/AViewerPlugin';
import { Object3D, Quaternion, Spherical, Vector3 } from 'three';
import { IUiConfigContainer, UiObjectConfig } from 'webgi/interfaces';
import { Easing } from 'popmotion';
import { EasingFunctionType } from 'webgi/helpers/animation';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
import { CameraController } from 'webgi/core/threejs/CameraController';
export declare class CameraView implements IUiConfigContainer {
    position: Vector3;
    target: Vector3;
    quaternion: Quaternion;
    up: Vector3;
    name: string;
    snap: string;
    focusView: () => void;
    deleteView: () => void;
    constructor(position?: Vector3, target?: Vector3, up?: Vector3, quaternion?: Quaternion, snap?: string);
    private _nameChanged;
    uiConfig: UiObjectConfig<any, string>;
}
/**
 * Plugin to save, interact and animate between with multiple camera states/views.
 */
export declare class CameraViewPlugin extends AViewerPlugin<'viewChange' | 'startViewChange'> {
    get animationLooping(): boolean;
    get animating(): boolean;
    static readonly PluginType = "CameraViews";
    enabled: boolean;
    constructor();
    private _cameraViews;
    get camViews(): CameraView[];
    viewLooping: boolean;
    /**
     * Pauses time between view changes when animating all views or looping.
     */
    viewPauseTime: number;
    /**
     * {@link EasingFunctions}
     */
    animEase: EasingFunctionType;
    animDuration: number;
    rotationOffset: number;
    interpolateMode: 'spherical' | 'linear';
    animateOnScroll: boolean;
    seekOnScroll: boolean;
    private _animating;
    dependencies: never[];
    private _scrollAnimationState;
    scrollAnimationDamping: number;
    private _wheel;
    /**
     * For slight rotation of camera when seekOnScroll is enabled
     */
    private _pointerMove;
    private _updaters;
    private _lastFrameTime;
    onAdded(viewer: ViewerApp): Promise<void>;
    private _fadeDisabled;
    private _postFrame;
    onRemove(viewer: ViewerApp): Promise<void>;
    private _viewQueue;
    private _animationLooping;
    private _infiniteLooping;
    private _animationLoop;
    animateAllViews(): Promise<void>;
    resetToFirstView(duration?: number): Promise<void>;
    recordAllViews(onStart?: () => void): Promise<void>;
    addCurrentView(): Promise<void>;
    getCurrentCameraView(camera?: CameraController): CameraView;
    private _driver;
    private _currentView;
    focusView(view: CameraView): Promise<void>;
    deleteView(view: CameraView): void;
    focusNext: (wrap?: boolean) => void;
    focusPrevious: (wrap?: boolean) => void;
    private _popAnimations;
    stopAllAnimations(): Promise<void>;
    animateToView(view: CameraView, duration?: number, easing?: Easing | EasingFunctionType): Promise<void>;
    fromJSON(data: any, meta?: any): this | null;
    animateToObject(selected?: Object3D, distanceMultiplier?: number, duration?: number, ease?: Easing | EasingFunctionType, distanceBounds?: {
        min: number;
        max: number;
    }): Promise<void>;
    animateToTarget(distanceFromTarget: number, center: Vector3, duration?: number, ease?: Easing | EasingFunctionType): Promise<void>;
    uiConfig: UiObjectConfig;
}
export declare function sphericalFromObject(obj: {
    position: Vector3;
    up: Vector3;
}, target: Vector3): Spherical;
export declare function lerpAngle(a: number, b: number, t: number): number;
export declare function lerpAngle2(a: number, b: number, w: number): number;
export declare function slerp(start: Vector3, end: Vector3, percent: number): Vector3;
//# sourceMappingURL=CameraViewPlugin.d.ts.map