import { IRenderTarget, IShaderPropertiesUpdater, IViewerPlugin, UiObjectConfig } from 'webgi/interfaces';
import { IUniform } from 'three';
import { GenericFilterPlugin } from 'webgi/plugins/GenericFilterPlugin';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
import { NormalRenderPass } from 'webgi/passes/threejs/NormalRenderPass';
export declare class NormalBufferPlugin extends GenericFilterPlugin<NormalRenderPass, 'normalBuffer', '', ViewerApp> implements IViewerPlugin, IShaderPropertiesUpdater {
    passId: 'normalBuffer';
    protected _beforeFilters: string[];
    protected _afterFilters: never[];
    protected _requiredFilters: string[];
    static readonly PluginType = "NormalBufferPlugin";
    private _normalTarget;
    passCtor(v: ViewerApp): NormalRenderPass;
    protected _update(v: ViewerApp): boolean;
    constructor(enabled?: boolean);
    getNormalBuffer(): IRenderTarget | undefined;
    onDispose(viewer: ViewerApp): Promise<void>;
    onRemove(viewer: ViewerApp): Promise<void>;
    updateShaderProperties(material: {
        defines: Record<string, string | number | undefined>;
        uniforms: {
            [p: string]: IUniform;
        };
    }): this;
    get uiConfig(): UiObjectConfig | undefined;
}
//# sourceMappingURL=NormalBufferPlugin.d.ts.map