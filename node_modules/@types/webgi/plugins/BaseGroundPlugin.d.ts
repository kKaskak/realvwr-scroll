import { BufferGeometry, Mesh, MeshStandardMaterial, Vector3Tuple } from 'three';
import type { Reflector2 } from 'webgi/helpers/threejs/Reflector2';
import { AViewerPlugin } from 'webgi/core/AViewerPlugin';
import { Class, IEvent, IModel, IViewerPlugin, UiObjectConfig } from 'webgi/interfaces';
import { MeshStandardMaterial2 } from 'webgi/extras/asset_manager/threejs/MeshStandardMaterial2';
import { AssetManagerPlugin } from 'webgi/extras/asset_manager/AssetManagerPlugin';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
export interface GroundOptions {
    shape: string;
    up: Vector3Tuple;
    autoAdjustTransform: boolean;
}
export declare class BaseGroundPlugin<TMesh extends Mesh<BufferGeometry, MeshStandardMaterial> | Reflector2 = Mesh<BufferGeometry, MeshStandardMaterial> | Reflector2> extends AViewerPlugin<''> implements IViewerPlugin {
    get enabled(): boolean;
    set enabled(value: boolean);
    get material(): MeshStandardMaterial2 | undefined;
    get mesh(): IModel<TMesh> | undefined;
    protected _geometry: BufferGeometry;
    protected _material?: MeshStandardMaterial2;
    private _iMesh?;
    protected _mesh?: TMesh;
    protected _options: GroundOptions;
    protected _manager?: AssetManagerPlugin;
    private _transformNeedRefresh;
    dependencies: Class<IViewerPlugin>[];
    constructor(options?: Partial<GroundOptions>);
    visible: boolean;
    size: number;
    yOffset: number;
    renderToDepth: boolean;
    tonemapGround: boolean;
    limitCameraAboveGround: boolean;
    protected _createMesh(): Mesh;
    onAdded(viewer: ViewerApp): Promise<void>;
    protected _postFrame(): void;
    protected _preRender(): void;
    onDispose(viewer: ViewerApp): Promise<void>;
    onRemove(viewer: ViewerApp): Promise<void>;
    protected _removeMaterial(): void;
    protected _onSceneUpdate(event: IEvent<string>): void;
    refreshTransform(): void;
    private _refreshOptions2;
    refreshOptions(): void;
    private _cameraLimitsSet;
    private _cameraLastMaxPolarAngle;
    private _refreshCameraLimits;
    protected _refreshTransform(): void;
    protected _refreshMaterial(): boolean;
    setOptions(options: Partial<GroundOptions>): void;
    fromJSON(data: any, meta?: any): this | null;
    protected _uiConfig?: UiObjectConfig;
    protected _extraUiConfig(): (UiObjectConfig | (() => UiObjectConfig | UiObjectConfig[]))[];
    get uiConfig(): UiObjectConfig;
}
//# sourceMappingURL=BaseGroundPlugin.d.ts.map