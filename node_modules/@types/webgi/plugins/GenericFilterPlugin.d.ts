import { IFilter, IPass, IPassID, IViewerApp, IViewerPlugin } from 'webgi/interfaces';
import { AViewerPlugin } from 'webgi/core/AViewerPlugin';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
export declare abstract class GenericFilterPlugin<T extends IPass, TPassId extends IPassID, TEvent extends string, TViewer extends IViewerApp = ViewerApp> extends AViewerPlugin<TEvent, TViewer> implements IViewerPlugin {
    abstract passId: TPassId;
    protected _pass?: IFilter<T, TPassId>;
    abstract passCtor(v: TViewer): T;
    protected _update(v: TViewer): boolean;
    protected _afterFilters?: IPassID[];
    protected _beforeFilters?: IPassID[];
    protected _requiredFilters?: IPassID[];
    private _enabledTemp;
    get enabled(): boolean;
    set enabled(value: boolean);
    constructor();
    onAdded(viewer: TViewer): Promise<void>;
    onRemove(viewer: TViewer): Promise<void>;
    get pass(): IFilter<T, TPassId> | undefined;
    toJSON(meta?: any): any;
    fromJSON(data: any, meta?: any): this | null;
}
//# sourceMappingURL=GenericFilterPlugin.d.ts.map