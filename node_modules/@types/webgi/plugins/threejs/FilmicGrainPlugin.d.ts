import { IMaterial, IUiConfigContainer, UiObjectConfig } from 'webgi/interfaces';
import { Object3D, Shader, WebGLRenderer } from 'three';
import { MaterialExtension } from 'webgi/extras/asset_manager/threejs/MaterialExtender';
import { GenericExtensionPlugin } from '../GenericExtensionPlugin';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
declare class FilmicGrainExtension implements IUiConfigContainer, MaterialExtension {
    uiConfig?: UiObjectConfig;
    enabled: boolean;
    grainMultiply: boolean;
    grainIntensity: number;
    private _combinedPostPlugin;
    extraUniforms: any;
    parsFragmentSnippet: any;
    constructor(viewer: ViewerApp);
    shaderExtender(shader: Shader, material: IMaterial, renderer: WebGLRenderer): void;
    onObjectRender(object: Object3D, material: IMaterial, renderer: WebGLRenderer): void;
    getUiConfig(): any;
    computeCacheKey(material: IMaterial): string;
    isCompatible(material: IMaterial): boolean;
    private _setDirty;
    __setDirty?: () => void;
    setDirty(): void;
}
export declare class FilmicGrainPlugin extends GenericExtensionPlugin<FilmicGrainExtension> {
    static readonly PluginType = "FilmicGrain";
    constructor();
    generateExtension(viewer: ViewerApp): FilmicGrainExtension;
    get intensity(): number;
    set intensity(value: number);
    get multiply(): boolean;
    set multiply(value: boolean);
}
export {};
//# sourceMappingURL=FilmicGrainPlugin.d.ts.map