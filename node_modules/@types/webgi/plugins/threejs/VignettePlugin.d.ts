import { IMaterial, IUiConfigContainer, UiObjectConfig } from 'webgi/interfaces';
import { Color, Object3D, Shader, WebGLRenderer } from 'three';
import { MaterialExtension } from 'webgi/extras/asset_manager/threejs/MaterialExtender';
import { GenericExtensionPlugin } from '../GenericExtensionPlugin';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
declare class VignetteExtension implements IUiConfigContainer, MaterialExtension {
    uiConfig?: UiObjectConfig;
    enabled: boolean;
    power: number;
    bgcolor: Color;
    static readonly PluginType = "Vignette";
    private _combinedPostPlugin;
    extraUniforms: any;
    parsFragmentSnippet: any;
    constructor(viewer: ViewerApp);
    shaderExtender(shader: Shader, material: IMaterial, renderer: WebGLRenderer): void;
    onObjectRender(object: Object3D, material: IMaterial, renderer: WebGLRenderer): void;
    getUiConfig(): any;
    computeCacheKey(material: IMaterial): string;
    isCompatible(material: IMaterial): boolean;
    private _setDirty;
    __setDirty?: () => void;
    setDirty(): void;
}
export declare class VignettePlugin extends GenericExtensionPlugin<VignetteExtension> {
    static readonly PluginType = "Vignette";
    constructor();
    generateExtension(viewer: ViewerApp): VignetteExtension;
    get power(): number;
    set power(value: number);
    get color(): Color;
    set color(value: Color);
}
export {};
//# sourceMappingURL=VignettePlugin.d.ts.map