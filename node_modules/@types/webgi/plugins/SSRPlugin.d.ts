import { IFilter, IRenderTarget, IViewerPlugin, UiObjectConfig } from 'webgi/interfaces';
import { GBufferPlugin } from './GBufferPlugin';
import { MultiFilterPlugin } from 'webgi/plugins/MultiFilterPlugin';
import { ProgressivePlugin } from 'webgi/plugins/threejs/ProgressivePlugin';
import { SSRPass } from 'webgi/passes/threejs/SSRPass';
import { AssetManagerPlugin } from 'webgi/extras/asset_manager/AssetManagerPlugin';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
export declare class SSRPlugin extends MultiFilterPlugin<'', [IFilter<SSRPass, 'ssr'>], ViewerApp> implements IViewerPlugin {
    get ssrTarget(): IRenderTarget | undefined;
    static readonly PluginType = "SSReflection";
    private _ssrTarget?;
    dependencies: (typeof AssetManagerPlugin | typeof ProgressivePlugin | typeof GBufferPlugin)[];
    constructor();
    get enabled(): boolean;
    set enabled(value: boolean);
    onAdded(viewer: ViewerApp): Promise<void>;
    inlineSSR: boolean;
    createPasses(v: ViewerApp): [IFilter<SSRPass, 'ssr'>];
    onRemove(viewer: ViewerApp): Promise<void>;
    setDirty(): void;
    private _uiConfig?;
    get uiConfig(): UiObjectConfig;
}
//# sourceMappingURL=SSRPlugin.d.ts.map