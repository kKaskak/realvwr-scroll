import { IGBufferUpdater, IRenderTarget, IViewerPlugin, UiObjectConfig } from 'webgi/interfaces';
import { GBufferPlugin } from './GBufferPlugin';
import { SSBevelPass } from 'webgi/passes/threejs/SSBevelPass';
import { AssetManagerPlugin } from 'webgi/extras/asset_manager/AssetManagerPlugin';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
import { GenericFilterPlugin } from './GenericFilterPlugin';
import { NormalBufferPlugin } from './NormalBufferPlugin';
import { Object3D, Vector4 } from 'three';
export declare class SSBevelPlugin extends GenericFilterPlugin<SSBevelPass, 'ssBevel', ''> implements IViewerPlugin, IGBufferUpdater {
    passId: 'ssBevel';
    protected _beforeFilters: string[];
    protected _afterFilters: string[];
    protected _requiredFilters: string[];
    get bevelTarget(): IRenderTarget | undefined;
    static readonly PluginType = "SSBevelPlugin";
    private _bevelTarget?;
    private _lastEnabled;
    dependencies: (typeof AssetManagerPlugin | typeof GBufferPlugin | typeof NormalBufferPlugin)[];
    constructor(enabled?: boolean);
    private _loaderCreate;
    passCtor(v: ViewerApp): SSBevelPass;
    onAdded(viewer: ViewerApp): Promise<void>;
    onRemove(viewer: ViewerApp): Promise<void>;
    setDirty(): void;
    protected _update(v: ViewerApp): boolean;
    get uiConfig(): UiObjectConfig;
    updateGBuffer(object: Object3D, data: Vector4): void;
    static readonly SSBEVEL_GLTF_EXTENSION = "WEBGI_materials_ssbevel";
}
//# sourceMappingURL=SSBevelPlugin.d.ts.map