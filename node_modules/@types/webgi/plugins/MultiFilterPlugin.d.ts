import { AViewerPlugin } from 'webgi/core/AViewerPlugin';
import { IFilter, IPass, IPassID, IViewerApp, IViewerPlugin } from 'webgi/interfaces';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
declare type IsTuple<T> = T extends unknown[] ? true : false;
declare type TupleFixedKeyof<T> = IsTuple<T> extends true ? Exclude<keyof T, keyof []> : keyof T;
interface TupleT<T> {
    [n: string | number | symbol]: T;
}
declare type TTupleRecord<TP extends TupleT<any>, TKey extends string> = {
    [PP in TupleFixedKeyof<TP> as TP[PP][TKey]]: TP[PP];
};
export declare abstract class MultiFilterPlugin<TEvent extends string, TPasses extends IFilter<IPass, IPassID>[], TViewer extends IViewerApp = ViewerApp> extends AViewerPlugin<TEvent, TViewer> implements IViewerPlugin {
    get passes(): TTupleRecord<TPasses, 'passId'>;
    get pipeline(): IPassID[];
    set pipeline(value: IPassID[]);
    private _passes?;
    abstract createPasses(v: TViewer): TPasses;
    private _pipeline;
    constructor();
    onAdded(viewer: TViewer): Promise<void>;
    onRemove(viewer: TViewer): Promise<void>;
    toJSON(meta?: any): any;
    fromJSON(data: any, meta?: any): this | null;
}
export {};
//# sourceMappingURL=MultiFilterPlugin.d.ts.map