import { IShaderPropertiesUpdater, IViewerPlugin } from 'webgi/interfaces';
import { IUniform, Object3D, Texture, Vector4, WebGLMultipleRenderTargets, WebGLRenderTarget } from 'three';
import { GenericFilterPlugin } from 'webgi/plugins/GenericFilterPlugin';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
import { GBufferRenderPass } from 'webgi/passes/threejs/GBufferRenderPass';
export declare class GBufferPlugin extends GenericFilterPlugin<GBufferRenderPass<WebGLMultipleRenderTargets | WebGLRenderTarget>, 'gbuffer', '', ViewerApp> implements IViewerPlugin, IShaderPropertiesUpdater {
    renderFlagsBuffer: boolean;
    passId: 'gbuffer';
    protected _beforeFilters: string[];
    protected _afterFilters: never[];
    protected _requiredFilters: string[];
    static readonly PluginType = "GBuffer";
    private _gbufferTarget?;
    private _gbufferTextures;
    private _material;
    passCtor(v: ViewerApp): GBufferRenderPass<WebGLMultipleRenderTargets | WebGLRenderTarget>;
    protected _update(v: ViewerApp): boolean;
    constructor(renderFlagsBuffer?: boolean);
    getDepthNormal(): Texture | undefined;
    getFlagsTexture(): Texture | undefined;
    onDispose(viewer: ViewerApp): Promise<void>;
    onRemove(viewer: ViewerApp): Promise<void>;
    getTarget(): WebGLRenderTarget | WebGLMultipleRenderTargets | undefined;
    getUnpackSnippet(): string;
    updateShaderProperties(material: {
        defines: Record<string, string | number | undefined>;
        uniforms: {
            [p: string]: IUniform;
        };
    }): this;
    registerGBufferUpdater(updater: (object: Object3D, data: Vector4) => void): void;
}
//# sourceMappingURL=GBufferPlugin.d.ts.map