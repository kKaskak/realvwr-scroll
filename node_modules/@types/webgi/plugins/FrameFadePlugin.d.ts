import { IViewerPlugin, UiObjectConfig } from 'webgi/interfaces';
import { GenericFilterPlugin } from './GenericFilterPlugin';
import { AddBlendPass } from 'webgi/passes/threejs/AddBlendPass';
import { ProgressivePlugin } from 'webgi/plugins/threejs/ProgressivePlugin';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
export declare class FrameFadePlugin extends GenericFilterPlugin<AddBlendPass, 'frameFade', '', ViewerApp> implements IViewerPlugin {
    static readonly PluginType = "FrameFade";
    passId: 'frameFade';
    private _target?;
    private _fadeTime;
    private _fadeTimeState;
    private _toSaveFrame;
    protected _beforeFilters: string[];
    protected _afterFilters: string[];
    protected _requiredFilters: string[];
    dependencies: (typeof ProgressivePlugin)[];
    fadeOnActiveCameraChange: boolean;
    fadeOnMaterialUpdate: boolean;
    fadeOnSceneUpdate: boolean;
    pointerEnabled: boolean;
    startTransition(duration: number): Promise<void>;
    stopTransition(): void;
    constructor();
    private _fadeCam;
    private _fadeMat;
    private _fadeScene;
    private _onPointerMove;
    onAdded(viewer: ViewerApp): Promise<void>;
    onRemove(viewer: ViewerApp): Promise<void>;
    passCtor(v: ViewerApp): AddBlendPass;
    setDirty(): void;
    get dirty(): boolean;
    set dirty(v: boolean);
    protected _update(v: ViewerApp): boolean;
    get uiConfig(): UiObjectConfig | undefined;
    private _disabledBy;
    disable(name: string): void;
    enable(name: string): void;
    isDisabled(): boolean;
}
//# sourceMappingURL=FrameFadePlugin.d.ts.map