import { AnyOptions, UiObjectConfig } from 'webgi/interfaces';
export declare function uiConfig(uiType?: string, params?: AnyOptions): PropertyDecorator;
export declare function uiToggle(label?: string, params?: (any | ((that: any) => any))): PropertyDecorator;
export declare function uiMonitor(label?: string, params?: (any | ((that: any) => any))): PropertyDecorator;
export declare function uiSlider(label?: string, bounds?: [number, number], stepSize?: number, params?: (any | ((that: any) => any))): PropertyDecorator;
export declare function uiVector(label?: string, bounds?: [number, number], stepSize?: number, params?: (any | ((that: any) => any))): PropertyDecorator;
export declare function uiDropdown(label?: string, children?: UiObjectConfig[], params?: (any | ((that: any) => any))): PropertyDecorator;
export declare function uiButton(label?: string, params?: (any | ((that: any) => any))): PropertyDecorator;
export declare function uiInput(label?: string, params?: (any | ((that: any) => any))): PropertyDecorator;
export declare function uiColor(label?: string, params?: (any | ((that: any) => any))): PropertyDecorator;
export declare function uiImage(label?: string, params?: (any | ((that: any) => any))): PropertyDecorator;
export declare function generateUiConfig(obj: any): UiObjectConfig[];
export declare function generateUiFolder(label: string, obj: any, params?: any, type?: string): UiObjectConfig;
export declare function uiFolder(label: string, params?: any, type?: string): <T extends new (...args: any[]) => any>(constructor: T) => {
    new (...args: any[]): {
        [x: string]: any;
        uiConfig: UiObjectConfig<any, string>;
    };
} & T;
export declare function uiPanel(label: string, params?: any): <T extends new (...args: any[]) => any>(constructor: T) => {
    new (...args: any[]): {
        [x: string]: any;
        uiConfig: UiObjectConfig<any, string>;
    };
} & T;
//# sourceMappingURL=uiConfigDecorators.d.ts.map