import { AnyOptions, IDisposable, ISceneObject, TAssetTypes } from 'webgi/interfaces';
/**
 * Object Processor
 */
export declare class ObjectProcessorMap<K> implements IDisposable {
    private _processors;
    add<T extends ISceneObject>(key: K, p: IObjectProcessor<T>): void;
    remove<T extends ISceneObject<any>>(key: K, p: IObjectProcessor<T>): void;
    get<T extends ISceneObject>(key: K): IObjectProcessor<T>[];
    process<T extends ISceneObject>(key: K, object: T, options: AnyOptions): Promise<T>;
    dispose(): void;
}
export interface IObjectProcessor<T> {
    forAssetType: TAssetTypes;
    process?: (object: T, options: AnyOptions) => T;
    processAsync?: (object: T, options: AnyOptions) => Promise<T>;
}
//# sourceMappingURL=ObjectProcessorMap.d.ts.map