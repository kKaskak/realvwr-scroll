export declare function createCanvasElement(): HTMLCanvasElement;
export declare function pathJoin(parts: string[], sep?: string): string;
export declare function downloadBlob(b: Blob, name: string): void;
export declare function blobToDataURL(blob: Blob): Promise<string>;
export declare function downloadFile(b: File, name?: string): void;
export declare function uploadFile(multiple?: boolean, directory?: boolean, accept?: string): Promise<File[]>;
export declare function createDiv<T extends keyof HTMLElementTagNameMap = 'div'>({ innerHTML, id, classList, addToBody, elementTag }: Partial<InnerHTML> & {
    id?: string;
    classList?: string[];
    addToBody?: boolean;
    elementTag?: T;
}): HTMLElementTagNameMap[T];
export declare function createImage(url: string): Promise<HTMLImageElement>;
export declare function createStyles(styles: string): HTMLStyleElement;
export declare function createScriptFromURL(url: string): Promise<unknown>;
export declare function imageBitmapToBase64(bitmap: ImageBitmap | CanvasImageSource, maxWidth?: number, detachBitmap?: boolean): string;
export declare function imageUrlToImageData(url: string): Promise<ImageData>;
export declare function now(): number;
export declare function mobileAndTabletCheck(): boolean;
export declare function getUrlQueryParam(p: string, def?: any): any;
export declare function setUrlQueryParam(p: string, v: string | null, reload?: boolean): void;
export declare function arrayBufferToBase64(buffer: ArrayBuffer): string;
export declare function base64ToArrayBuffer(base64: string): ArrayBufferLike;
export declare function toTitleCase(str: string): string;
export interface ImageCanvasOptions {
    width: number;
    height: number;
    backgroundColor?: string;
    displayPixelRatio?: number;
}
export declare function imageToCanvas(image: HTMLImageElement, { backgroundColor, displayPixelRatio, width, height, }: ImageCanvasOptions): HTMLCanvasElement;
declare const TYPED_ARRAYS: {
    Int8Array: Int8ArrayConstructor;
    Uint8Array: Uint8ArrayConstructor;
    Uint8ClampedArray: Uint8ClampedArrayConstructor;
    Int16Array: Int16ArrayConstructor;
    Uint16Array: Uint16ArrayConstructor;
    Int32Array: Int32ArrayConstructor;
    Uint32Array: Uint32ArrayConstructor;
    Float32Array: Float32ArrayConstructor;
    Float64Array: Float64ArrayConstructor;
};
export declare function getTypedArray(type: keyof typeof TYPED_ARRAYS, buffer: ArrayBuffer): Float32Array | Int32Array | Uint8Array | Int8Array | Uint8ClampedArray | Int16Array | Uint16Array | Uint32Array | Float64Array;
export {};
//# sourceMappingURL=dom.d.ts.map