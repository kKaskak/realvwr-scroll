import { Quaternion, Vector3, Vector4 } from 'three';
import { Vector2 } from 'three/src/math/Vector2';
import { Color } from 'three/src/math/Color';
export declare function serialize(key?: string): PropertyDecorator;
export declare const serializers: {
    obj: (obj: any, meta: any) => {
        [k: string]: any;
    };
    vec4: (v: Vector4) => {
        x: number;
        y: number;
        z: number;
        w: number;
        isVector4: boolean;
    };
    vec3: (v: Vector3) => {
        x: number;
        y: number;
        z: number;
        isVector3: boolean;
    };
    vec2: (v: Vector2) => {
        x: number;
        y: number;
        isVector2: boolean;
    };
    color: (c: Color) => {
        r: number;
        g: number;
        b: number;
        isColor: boolean;
    };
    quat: (v: Quaternion) => {
        x: number;
        y: number;
        z: number;
        w: number;
        isQuaternion: boolean;
    };
    texture: (obj: any, meta?: any) => any;
    material: (obj: any, meta?: any) => any;
};
export declare const deserializers: {
    obj: (data: any, obj: any, meta: any) => any;
    vec4: (v: any, o: any) => any;
    vec3: (v: any, o: any) => any;
    vec2: (v: any, o: any) => any;
    color: (v: any, o: any) => any;
    quat: (v: any, o: any) => any;
};
/**
 *
 * @param obj
 * @param isThis - does not work for Texture, Material, Vector, Color
 * @param meta
 */
export declare function serializeObject(obj: any, isThis: boolean, meta?: any): any;
/**
 * todo: fix problem when deserializing twice. deserializeObject(deserializeObject(obj))
 * @param data
 * @param object - current object that's set. If possible the data is deserialized into that instead of creating new objects.
 * @param isThis - set it to true if called from the object itself like from `fromJSON()`
 * @param meta
 * @returns {any}
 */
export declare function deserializeObject<T>(data: any, object: T, isThis: boolean, meta: any): T;
export declare function serializable(id: string): <T extends new (...args: any[]) => any>(constructor: T) => T;
//# sourceMappingURL=serialize.d.ts.map