import { BufferGeometry, Curve, Shape, Vector2, Vector3 } from 'three';
export declare class TubeShapeGeometry extends BufferGeometry {
    frames: {
        tangents: Vector3[];
        normals: Vector3[];
        binormals: Vector3[];
    };
    parameters: {
        path: Curve<Vector3>;
        shape: Shape;
        shapeScale: Vector2;
        shapeSegments: number;
        closed: boolean;
        tubularSegments: number;
        primary: 'shape' | 'path';
    };
    /**
     *
     * @param shape - assumed to be closed
     * @param path -
     * @param shapeSegments
     * @param tubularSegments
     * @param closed - for path
     * @param shapeScale
     * @param primary - 'shape' or 'path'
     */
    constructor(shape: Shape, path: Curve<Vector3>, shapeSegments?: number, tubularSegments?: number, closed?: boolean, shapeScale?: Vector2, primary?: 'shape' | 'path');
    createSplits(splits: number[]): number;
    toJSON(): any;
}
//# sourceMappingURL=TubeShapeGeometry.d.ts.map