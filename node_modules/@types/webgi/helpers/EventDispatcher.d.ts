export interface IEvent<T> {
    type: T;
    target?: any;
    [attachment: string]: any;
}
export interface IEventDispatcher<T> {
    /**
     * Adds a listener to an event type.
     * @param type The type of event to listen to.
     * @param listener The function that gets called when the event is fired.
     */
    addEventListener(type: T, listener: (event: IEvent<T>) => void): void;
    /**
     * Checks if listener is added to an event type.
     * @param type The type of event to listen to.
     * @param listener The function that gets called when the event is fired.
     */
    hasEventListener(type: T, listener: (event: IEvent<T>) => void): boolean;
    /**
     * Removes a listener from an event type.
     * @param type The type of the listener that gets removed.
     * @param listener The listener function that gets removed.
     */
    removeEventListener(type: T, listener: (event: IEvent<T>) => void): void;
    /**
     * Fire an event type.
     * @param event.type The type of event that gets fired.
     */
    dispatchEvent(event: IEvent<T>): void;
}
export declare class SimpleEventDispatcher<T extends string> implements IEventDispatcher<T> {
    constructor();
    private _eventListeners;
    addEventListener(type: T, listener: (event: IEvent<T>) => void): void;
    hasEventListener(type: T, listener: (event: IEvent<T>) => void): boolean;
    removeEventListener(type: T, listener: (event: IEvent<T>) => void): void;
    dispatchEvent(event: IEvent<T>): void;
}
//# sourceMappingURL=EventDispatcher.d.ts.map