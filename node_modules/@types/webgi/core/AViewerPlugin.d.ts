import { ViewerApp } from 'webgi/viewer/ViewerApp';
import { SimpleEventDispatcher } from 'webgi/helpers/EventDispatcher';
import { IFilter, IPass, IPassID, IShaderPropertiesUpdater, IViewerApp, IViewerPlugin, PartialPick } from 'webgi/interfaces';
export declare abstract class AViewerPlugin<T extends string, TViewer extends IViewerApp = ViewerApp> extends SimpleEventDispatcher<T | 'serialize' | 'deserialize'> implements IViewerPlugin<TViewer> {
    get dirty(): boolean;
    set dirty(value: boolean);
    protected _dirty: boolean;
    protected _viewer?: TViewer;
    abstract enabled: boolean;
    onAdded(viewer: TViewer): Promise<void>;
    onDispose(viewer: TViewer): Promise<void>;
    onRemove(viewer: TViewer): Promise<void>;
    toJSON(meta?: any): any;
    fromJSON(data: any, meta?: any): this | null | Promise<this | null>;
}
export declare function makeFilter<Tid extends IPassID, TPass extends IPass>(viewer: IViewerApp, filter: PartialPick<IFilter<TPass, Tid>, 'passId' | 'passObject'>, updaters?: (IShaderPropertiesUpdater | undefined)[] | (() => (IShaderPropertiesUpdater | undefined)[])): IFilter<TPass, Tid>;
//# sourceMappingURL=AViewerPlugin.d.ts.map