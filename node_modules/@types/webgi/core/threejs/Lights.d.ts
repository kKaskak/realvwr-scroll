import { AmbientLight, Color, DirectionalLight, PointLight, SpotLight } from 'three';
import { AnyOptions, ILight, IUiConfigContainer, UiObjectConfig } from 'webgi/interfaces';
export declare class DirectionalLight2 extends DirectionalLight implements ILight<DirectionalLight2> {
    assetType: 'light';
    setDirty?: (options?: AnyOptions) => void;
    isDirectionalLight2: boolean;
    get lightObject(): DirectionalLight2;
    get modelObject(): DirectionalLight2;
    constructor(color?: Color | string | number, intensity?: number);
    copy(source: this, recursive?: boolean): this;
    protected _uiConfig?: UiObjectConfig;
    get uiConfig(): UiObjectConfig;
    toJSON(meta?: any): any;
    fromJSON(data: any, meta?: any): this | null;
}
export declare class SpotLight2 extends SpotLight implements ILight<SpotLight2>, IUiConfigContainer {
    assetType: 'light';
    setDirty?: (options?: AnyOptions) => void;
    get lightObject(): SpotLight2;
    get modelObject(): SpotLight2;
    private _uiConfig?;
    constructor(color?: Color | string | number, intensity?: number, distance?: number, angle?: number, penumbra?: number, decay?: number);
    copy(source: this, recursive?: boolean): this;
    get uiConfig(): UiObjectConfig;
    toJSON(meta?: any): any;
    fromJSON(data: any, meta?: any): this | null;
}
export declare class PointLight2 extends PointLight implements ILight<PointLight2>, IUiConfigContainer {
    assetType: 'light';
    setDirty?: (options?: AnyOptions) => void;
    get lightObject(): PointLight2;
    get modelObject(): PointLight2;
    private _uiConfig?;
    constructor(color?: Color | string | number, intensity?: number, distance?: number, decay?: number);
    copy(source: this, recursive?: boolean): this;
    get uiConfig(): UiObjectConfig;
    toJSON(meta?: any): any;
    fromJSON(data: any, meta?: any): this | null;
}
export declare class AmbientLight2 extends AmbientLight implements ILight<AmbientLight2> {
    assetType: 'light';
    setDirty?: (options?: AnyOptions) => void;
    get lightObject(): AmbientLight2;
    get modelObject(): AmbientLight2;
    constructor(color?: Color | string | number, intensity?: number);
    copy(source: this, recursive?: boolean): this;
    private _uiConfig?;
    get uiConfig(): UiObjectConfig;
    toJSON(meta?: any): any;
    fromJSON(data: any, meta?: any): this | null;
}
//# sourceMappingURL=Lights.d.ts.map