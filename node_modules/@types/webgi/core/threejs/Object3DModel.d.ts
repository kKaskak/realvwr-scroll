import { AddModelOptions, AnyOptions, IMaterial, IModel, UiObjectConfig } from 'webgi/interfaces';
import { BufferGeometry, Object3D } from 'three';
import { IEvent } from 'webgi/helpers/EventDispatcher';
export declare type Object3DModelOptions = AddModelOptions & {
    pseudoCenter?: boolean;
    autoCenter?: boolean;
    license?: string;
};
export declare class Object3DModel implements IModel<Object3D> {
    assetType: 'model';
    get visible(): boolean;
    set visible(visible: boolean);
    get uuid(): string;
    get modelObject(): Object3D & IModel<Object3D>;
    get name(): string;
    set name(name: string);
    private _modelObject;
    constructor(modelObject: Object3D & IModel, { pseudoCenter, autoCenter, autoScale, autoScaleRadius, license }?: Object3DModelOptions);
    get license(): string;
    set license(license: string);
    addEventListener(type: string, listener: (event: IEvent<string>) => void): void;
    dispatchEvent(event: IEvent<string>): void;
    hasEventListener(type: string, listener: (event: IEvent<string>) => void): boolean;
    removeEventListener(type: string, listener: (event: IEvent<string>) => void): void;
    traverse(callback: (object: Object3D) => void): void;
    dispose(): void;
    setDirty(e?: AnyOptions): void;
    setMaterial(material?: IMaterial | IMaterial[]): IMaterial[];
    get material(): IMaterial<any> | IMaterial<any>[] | undefined;
    get geometry(): any;
    setGeometry(geometry?: BufferGeometry, force?: boolean): BufferGeometry | undefined;
    get userData(): any;
    set userData(userData: any);
    /**
     * Not implemented
     */
    updateBounds(): void;
    private _uiConfig?;
    get uiConfig(): UiObjectConfig;
    clone(): Object3DModel;
}
/**
 * Setup an Object3DModel with a model processor
 * @param obj
 * @param modelProcessor
 */
export declare function setupObject3dModel(obj: IModel<Object3D>, modelProcessor: (m: IModel) => (IModel | undefined)): IModel<Object3D<import("three").Event>>;
//# sourceMappingURL=Object3DModel.d.ts.map